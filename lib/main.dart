import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'firebase_options.dart'; // generated by flutterfire configure
import 'package:shared_preferences/shared_preferences.dart'; // Added

import 'screens/splash_screen.dart';
import 'screens/login_screen.dart';
import 'screens/signup_screen.dart';
import 'screens/otp_verification_screen.dart';
import 'screens/forgot_password_screen.dart';
import 'screens/home_screen.dart';

Future<void> main() async {
  WidgetsFlutterBinding.ensureInitialized();

// Initialize Firebase for Android, iOS, Web, etc. using generated options
  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform,
  );

  runApp(MyApp()); // Removed const
}

class MyApp extends StatefulWidget {
  @override
  State<MyApp> createState() => MyAppState();

  static MyAppState of(BuildContext context) =>
      context.findAncestorStateOfType<MyAppState>()!;
}

class MyAppState extends State<MyApp> {
  ThemeMode themeMode = ThemeMode.system;

  @override
  void initState() {
    super.initState();
    _loadThemeMode();
  }

  Future<void> _loadThemeMode() async {
    final prefs = await SharedPreferences.getInstance();
    final themeIndex = prefs.getInt('themeMode') ?? 0; // 0: system, 1: light, 2: dark
    setState(() {
      themeMode = ThemeMode.values[themeIndex];
    });
  }

  void setThemeMode(ThemeMode mode) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setInt('themeMode', mode.index);
    setState(() {
      themeMode = mode;
    });
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Auth Phase 1',
      debugShowCheckedModeBanner: false,
      initialRoute: '/',
      routes: {
        '/': (context) => SplashScreen(), // Removed const
        '/login': (context) => LoginScreen(), // Removed const
        '/signup': (context) => SignupScreen(), // Removed const
        '/otp': (context) => OtpVerificationScreen(), // Removed const
        '/forgot': (context) => ForgotPasswordScreen(), // Removed const
        '/home': (context) => HomeScreen(),
      },
      themeMode: themeMode,
      theme: ThemeData(
        colorScheme: const ColorScheme(
          brightness: Brightness.light,
          primary: Color(0xFF514CA1), // Deep purple/blue
          onPrimary: Colors.white,
          primaryContainer: Color(0xFFD7CFFF),
          onPrimaryContainer: Color(0xFF10006B),
          secondary: Color(0xFFA8AD5F), // Muted green/yellow
          onSecondary: Colors.black,
          secondaryContainer: Color(0xFFE0E3B4),
          onSecondaryContainer: Color(0xFF2C3000),
          tertiary: Color(0xFFD79141), // Orange/brown
          onTertiary: Colors.white,
          tertiaryContainer: Color(0xFFFFDCC0),
          onTertiaryContainer: Color(0xFF3F1100),
          error: Color(0xFFBA1A1A),
          onError: Colors.white,
          errorContainer: Color(0xFFFFDAD6),
          onErrorContainer: Color(0xFF410002),
          background: Color(0xFFFDFBFF),
          onBackground: Color(0xFF1B1B1F),
          surface: Color(0xFFFDFBFF),
          onSurface: Color(0xFF1B1B1F),
          surfaceVariant: Color(0xFFF8AF0B), // Bright orange/yellow
          onSurfaceVariant: Color(0xFF46464F),
          outline: Color(0xFF6C5050), // Muted red/brown
          onInverseSurface: Color(0xFFF2F0F4),
          inverseSurface: Color(0xFF303034),
          inversePrimary: Color(0xFFC7BFFF),
          shadow: Colors.black,
          surfaceTint: Color(0xFF514CA1),
          outlineVariant: Color(0xFFC6C5D0),
          scrim: Colors.black,
        ),
        useMaterial3: true,
      ),
      darkTheme: ThemeData(
        colorScheme: const ColorScheme(
          brightness: Brightness.dark,
          primary: Color(0xFF9E9BFF), // Adjusted primary for dark mode
          onPrimary: Color(0xFF211A71),
          primaryContainer: Color(0xFF38338A),
          onPrimaryContainer: Color(0xFFD7CFFF),
          secondary: Color(0xFFC4C79B), // Adjusted secondary for dark mode
          onSecondary: Color(0xFF2C3000),
          secondaryContainer: Color(0xFF434700),
          onSecondaryContainer: Color(0xFFE0E3B4),
          tertiary: Color(0xFFF0B87A), // Adjusted tertiary for dark mode
          onTertiary: Color(0xFF3F1100),
          tertiaryContainer: Color(0xFF572700),
          onTertiaryContainer: Color(0xFFFFDCC0),
          error: Color(0xFFFFB4AB),
          onError: Color(0xFF690005),
          errorContainer: Color(0xFF93000A),
          onErrorContainer: Color(0xFFFFDAD6),
          background: Color(0xFF1B1B1F),
          onBackground: Color(0xFFE4E2E6),
          surface: Color(0xFF1B1B1F),
          onSurface: Color(0xFFE4E2E6),
          surfaceVariant: Color(0xFFE0C270), // Adjusted surface variant for dark mode
          onSurfaceVariant: Color(0xFFC6C5D0),
          outline: Color(0xFF908E9B), // Adjusted outline for dark mode
          onInverseSurface: Color(0xFF1B1B1F),
          inverseSurface: Color(0xFFE4E2E6),
          inversePrimary: Color(0xFF514CA1),
          shadow: Colors.black,
          surfaceTint: Color(0xFFC7BFFF),
          outlineVariant: Color(0xFF46464F),
          scrim: Colors.black,
        ),
        useMaterial3: true,
      ),
    );
  }
}
